//
//  myClassOrStruct.swift
//  mySwift
//
//  Created by 战地记者 on 2018/5/30.
//  Copyright © 2018年 SXT. All rights reserved.
//

import UIKit

//////  类 和 结构体
class myClassOrStruct: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()


        ///类和结构体的对比
        //相同点
        /*
         定义属性用于存储值
         定义方法用于提供功能
         定义下标操作使得可以通过下标语法来访问实例所包含的值
         定义构造器用于生成初始化值
         通过扩展以增加默认实现的功能
         实现协议以提供某种标准功能
        */
        
        //与结构体相比，类还有以下功能
        /*
         继承允许一个类继承另一个类的特征
         类型转换允许在运行时检查和解释一个类实例的类型
         析构器允许一个类实例释放任何其所被分配的资源
         引用计数允许对一个类的多次引用
         */
        
        ///结构体是 值类型、  类是 引用类型
        
        
        ///结构体类型的成员逐一构造器
        //所有结构体都有一个自动生成的成员逐一构造器，用于初始化新结构体实例中成员的属性。新实例中各个属性的初始值可以通过属性的名称传递到成员逐一构造器之中：
        struct Resolution{
            var width = 0
            var height = 0
        }
        let vga = Resolution(width:640, height: 480)
        //与结构体不同，类实例没有默认的成员逐一构造器。
        
        ///恒等运算符
        //因为类是引用类型，有可能有多个常量和变量在幕后同时引用同一个类实例。（对于结构体和枚举来说，这并不成立。因为它们作为值类型，在被赋予到常量、变量或者传递到函数时，其值总是会被拷贝。）
        //如果能够判定两个常量或者变量是否引用同一个类实例将会很有帮助。为了达到这个目的，Swift 内建了两个恒等运算符：
        //等价于（===）
        //不等价于（!==）
        
        //请注意，“等价于”（用三个等号表示，===）与“等于”（用两个等号表示，==）的不同：
        /*
            “等价于”表示两个类类型（class type）的常量或者变量引用同一个类实例。
            “等于”表示两个实例的值“相等”或“相同”，判定时要遵照设计者定义的评判标准，因此相对于“相等”来说，这是一种更加合适的叫法。
        */
        
        
        
        
        
        
    }

    
    
    
    
    
    
    

}





